package  {	import Position;	import Pedestrian;	import Vehicle;		public class SafetyController {		private var colDetected:Boolean;		private var colAvoided:Boolean;		private var car:Vehicle;		private var person:Pedestrian;				private var brakeAmount:Number;		private var braking:Boolean;		private var gSet:Boolean;		private var CollisionPossible:Boolean = false;		public function SafetyController(veh:Vehicle) {			// constructor code			car = veh;			person = new Pedestrian();			colDetected = false;			colAvoided = false;			brakeAmount = 0;			braking = false;			gSet = false;		}				//Intersection point of car and person		private function calcIntersection():Position {			var intersect:Position = new Position();						intersect.setXPos(person.pos.getXPos());			intersect.setYPos(car.pos.getYPos());									return intersect;		}				public function updateVehicleInfo(dummy:Vehicle): void {			car.velocity.setXVel(dummy.velocity.getXVel());			car.pos.setXPos(dummy.pos.getXPos());			car.x = dummy.x;			car.steadyState = dummy.steadyState;			car.setAccel(dummy.getAccel());		}								//detects an immenent collision		public function detectCollision():void {			var intersection:Position = calcIntersection();						var car_dist:Number = (intersection.getXPos() - car.pos.getXPos()) - .25;			var person_dist:Number = (intersection.getYPos() - person.pos.getYPos()) - 1.25;												var car_startTime:Number = car_dist / car.velocity.getXVel();			if (car_startTime <= 0) {				car_startTime = 0;			}			var person_startTime:Number = person_dist / 2.8; //person.velocity.getYVel();			if (person_startTime <= 0) {				person_startTime = 0;			}			//var person_endTime:Number = (person_dist + 1.75) / person.velocity.getYVel();			var person_endTime:Number = (person_dist + 1.25) / 2.8;			if (person_endTime <= 0) {				person_endTime = 0;			}									var normalBrakeTime:Number = car.velocity.getXVel() / (9.81 * .25);			var hardBrakeTime:Number = car.velocity.getXVel() / (9.81 * .50);			var maxBrakeTime:Number = car.velocity.getXVel() / (9.81 * .85);						var maxBrake:Boolean = false;						//The car will pass the collision area while person is inside it			//COLLISION IMMENENT			//var collision:Boolean = (((person_startTime < car_startTime) && (car_startTime < person_endTime));// || (person.pos.getYPos() <= 1.25));			//var collision:Boolean = ((person_endTime >= car_startTime) && (person_endTime != 0)) ||  (person.pos.getYPos() <= 1.75);			//var collision:Boolean = ((2.8 * car_startTime) + person_dist >= -1.75) && (person_dist <= 1.75) && (car_dist > 0);							//David Algo Start			if(((2.8 * car_startTime) + person.pos.getYPos() >= -1.25) && (person.pos.getYPos() <= 1.25))			{CollisionPossible = true;}						else CollisionPossible = false;						if (CollisionPossible) //collision possible will always occur before maxBrake needs to be applied			{								brakeAmount = (-9.81 * .25);				//find speed two frames ahead								var speedInTwo:Number = car.velocity.getXVel() + -9.81 * .25 * .2;								//find distance from ped in two frames				var pedInTwo:Number = car_dist - ( car.velocity.getXVel() * .2 + .2 * .2 * -9.81 * .85 / 2);								//Determine if two frames from now it will be possible to stop before the ped				var vfInTwo:Number = speedInTwo * speedInTwo + 2 * -9.81* .85 * pedInTwo;		   				//if it will be impossible to stop two frames from now, stop now				if(vfInTwo > 0)				{					brakeAmount = (-9.81 * .85);				}							}				else			{				//Standard brake is applied untill (!Collision) or must stop				brakeAmount = (9.81 * .25);			}		 			/*			var collision:Boolean = false;			if (person.pos.getYPos() <= -1.25) {				if ((person_endTime <= car_startTime) && (person_endTime != 0)) {					if((person_startTime >= car_startTime) && (person_startTime != 0)) {						collision = true;					}				}			}			else if (person.pos.getYPos() <= 1.25) {				collision = true;			}						if (collision) {				if (car_startTime <= normalBrakeTime) {					brakeAmount = (-9.81 * .25);										if (car_startTime <= hardBrakeTime) {						brakeAmount = (-9.81 * .50);												if (car_startTime <= maxBrakeTime) {							brakeAmount = (-9.81 * .85);						}					}				}			}			else {				if ((person.pos.getYPos() > 1.75) || (car_startTime < person_endTime)) {					brakeAmount = (9.81 * .25);				}				else {					brakeAmount = 0;				}			}						*/		}				public function readSensor(ped:Pedestrian):void {			person = ped;		}				public function sendBrakeRequest():Number {			return brakeAmount;		}	}	}